/**
 * Box Circle.
 * @class Circle
 */
import { Point } from "./Point";
import { Box } from "./Box";
import { Shape, UserCustomData } from "./types";
export declare class Circle implements Shape {
    readonly x: number;
    readonly y: number;
    readonly r: number;
    readonly rPow2: number;
    readonly data: UserCustomData;
    /**
     * Circle constructor;
     * @constructs Circle
     * @param {number} x - X coordinate of the circle.
     * @param {number} y - Y coordinate of the circle.
     * @param {number} r - Radius of the circle.
     * @param {*} [data] - Data to store along the circle.
     */
    constructor(x: number, y: number, r: number, data?: UserCustomData);
    private euclideanDistancePow2;
    /**
     * Check if a point is contained in the circle.
     * @param {Point|Object} point - The point to test if it is contained in the circle.
     * @returns {boolean} - True if the point is contained in the circle, otherwise false.
     */
    contains(point: Point): boolean;
    /**
     * Check if a box intersects with this circle.
     * @param {Box|Object} range - The box to test the intersection with.
     * @returns {boolean} - True if it intersects, otherwise false.
     */
    intersects(range: Box): boolean;
}
//# sourceMappingURL=Circle.d.ts.map